#version 450 core

layout(local_size_x_id = 64, local_size_y_id = 1) in; // workgroup size defined with specialization constants. On cpp side there is associated SpecializationInfo entry in PipelineShaderStageCreateInfo

struct Entity {
	uvec2 pos;
	int isGoal;
};

struct Dimsgoal {
	uvec2 dims;
	uvec2 goal;
};

layout(binding = 0) buffer lay0{
	uint map[];
};
layout(binding = 1) buffer lay1{
	uvec2 entities[];
};
layout(binding = 2) buffer lay2{
	ivec2 steps[][20];
};
layout(binding = 3) buffer lay3{
	Dimsgoal dg;
};

struct Set{
	uvec2 set[1000];
	uint count;
};

void AddSet(inout Set set, in uvec2 vec) {
	set.set[set.count] = vec;
	set.count = set.count + 1;
}

void RemoveSet(inout Set set, in uvec2 pos) {
	for(int i=0; i<set.count; i++) {
		if(set.set[i] == pos) {
			for(int j=i; j<set.count-1; j++) {
				set.set[j] = set.set[j+1];
			}
			break;
		}
	}
	set.count = set.count - 1;
}

uint posToMapIdx(in uvec2 pos) {
	return pos.y*dg.dims.x + pos.x;
}

uint h(uvec2 pos) {
	return abs(int(dg.goal.x) - int(pos.x)) + abs(int(dg.goal.y) - int(pos.y));
}

uint hdist(uvec2 from, uvec2 to) {
	return abs(int(to.x) - int(from.x)) + abs(int(to.y) - int(from.y));
}

uvec2 up(in uvec2 pos) {
	ivec2 newpos = ivec2(pos) + ivec2(0,1);
	return uvec2(newpos.x, min(dg.dims.y,max(newpos.y,0)));
}

uvec2 down(in uvec2 pos) {
	ivec2 newpos = ivec2(pos) - ivec2(0,1);
	return uvec2(newpos.x, min(dg.dims.y,max(newpos.y,0)));
}

uvec2 left(in uvec2 pos) {
	ivec2 newpos = ivec2(pos) - ivec2(1,0);
	return uvec2(min(dg.dims.x,max(newpos.x,0)), newpos.y);
}

uvec2 right(in uvec2 pos) {
	ivec2 newpos = ivec2(pos) + ivec2(1,0);
	return uvec2(min(dg.dims.x,max(newpos.x,0)), newpos.y);
}

bool isInSet(in Set set, in uvec2 pos) {
	for(int i=0; i<set.count; i++) {
		if(set.set[i].x == pos.x && set.set[i].y == pos.y) {
			return true;
		}
	}
	return false;
}

uint id;


float uhash12(uvec2 x)
{
	uvec2 q = 1103515245U * ((x >> 1U) ^ (uvec2(x.y, x.x)));
	uint  n = 1103515245U * ((q.x) ^ (q.y >> 3U));
	return float(n) * (1.0 / float(0xffffffffU));
}
//float hash12(vec2 x) { return uhash12(uvec2((ivec2(500.*x) + 1073741824))); }


void main() {

	uint id = gl_GlobalInvocationID.x;
	

	// dummy workload
	for(uint i = 0; i < 300000000; i++)
	{}

	uvec2 e = entities[id];
	for(int i = 0; i < 20; i++)
	{
		float x = 2*uhash12(uvec2(i,id) + 100*e.x+1000)-1;
		float y = 2*uhash12(uvec2(i,id)*10 + 100*e.y+100)-1;
		steps[id][i] = ivec2(round(x), round(y));
	}
	
	
//
//	/*

//	return;
//
//	 id = gl_GlobalInvocationID.x;//const uint id = gl_GlobalInvocationID.y + gl_GlobalInvocationID.x; // current offset
//
//	uint numSteps = 10;
//
//	uvec2 start = entities[id];
//	uvec2 current = start;
//	uint currentIdx = posToMapIdx(current);
//
//	Set closedSet;
//	Set openSet;
//	closedSet.count = 0;
//	openSet.count = 0;
//	AddSet(openSet, current);
//
//	uvec2 cameFrom[5000];
//	uint gscore[5000];
//	uint fscore[5000];
//
//	for(int i=0; i<5000; i++) {
//		//cameFrom[i] = uvec2(1000,1000);
//		gscore[i] = 10000000;
//		fscore[i] = 10000000;
//	}
//
//	gscore[currentIdx] = 0;
//	fscore[currentIdx] = h(current);
//
//	uint count = 0;
//	bool finished = false;
//	
//	while(openSet.count > 0 && !finished  && hdist(start,current) < numSteps/*&& count < numSteps*/) {
//		int idx = 0;
//		uint lowest = 10000000;
//		for (int i=0; i < openSet.count; i++) {
//			uint score = fscore[posToMapIdx(openSet.set[i])];
//			if (score < lowest) {
//				idx = i;
//				lowest = score;
//			}
//		}
//		current = openSet.set[idx];
//		currentIdx = posToMapIdx(current);
//
//		if(current == dg.goal) {
//			finished = true;
//			continue;
//		}
//		
//		RemoveSet(openSet, current);
//		AddSet(closedSet, current);
//
//		uvec2 neighbours[] = {  up(current), down(current), right(current), left(current) };
//
//		for(int i = 0; i < 4; i++) {
//			uvec2 ne = neighbours[i];
//
//			//if in closed set OR outside bounds, we ignore this neighbour.
//			if(isInSet(closedSet,ne) || (ne.x == current.x && ne.y == current.y))
//				continue;
//
//			uint neIdx = posToMapIdx(ne);
//
//			//if obstacle, ignore
//			if(map[neIdx] != 0)
//				continue;
//			
//
//			uint t_gscore = gscore[currentIdx] + 1;
//
//			if(!isInSet(openSet,ne)) {
//				AddSet(openSet, ne);
//			}
//			else if (t_gscore >= gscore[neIdx]) {
//				continue;
//			}
//
//			cameFrom[neIdx] = current;
//			gscore[neIdx] = t_gscore;
//			fscore[neIdx] = gscore[neIdx] + h(ne);
//			
//		}
//		count = count + 1;
//	}
//	
//
//
//	for(int i=0; i<20; i++) {
//		steps[id][i] = ivec2(0,0);
//	}
//
//	//reconstruct path
//	int s = 0;
//	while(current != start && s < numSteps/*min(h(start),numSteps)*/) {
//		currentIdx = posToMapIdx(current);
//		ivec2 step = ivec2(current) - ivec2(cameFrom[currentIdx]);
//		steps[id][s] = step;//uvec2(current.x, current.y);
//		current = cameFrom[currentIdx];
//		s++;
//	}
//	*/
}